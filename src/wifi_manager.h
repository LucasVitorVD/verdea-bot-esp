#ifndef WIFI_MANAGER_H
#define WIFI_MANAGER_H

#include <ESP8266WiFi.h>
#include <WiFiManager.h>
#include "config.h"

// Vari√°veis globais para WiFi
extern WiFiManager wifiManager;
extern unsigned long lastConnectionAttempt;
extern int reconnectAttempts;
extern bool offlineMode;
extern bool isOnlineMode;

// Declara√ß√µes das fun√ß√µes
void initWiFi();
void handleWiFiConnection();
void checkOfflineMode();
bool getOfflineMode();
bool getOnlineMode();
void resetWiFiSettings();

// Vari√°vel interna para controle de reconex√£o
bool isReconnecting = false;

// Implementa√ß√µes
void initWiFi()
{
  // Configurar WiFiManager com timeout
  wifiManager.setConfigPortalTimeout(WIFI_CONFIG_TIMEOUT);
  wifiManager.setConnectTimeout(WIFI_CONNECT_TIMEOUT);

  wifiManager.setAPCallback([](WiFiManager *myWiFiManager)
                            {
    Serial.println("üì° =================================");
    Serial.println("üì° MODO DE CONFIGURA√á√ÉO ATIVADO");
    Serial.println("üì° =================================");
    Serial.println("üì° Rede: " + String(WIFI_AP_NAME));
    Serial.println("üì° Senha: " + String(WIFI_AP_PASSWORD));
    Serial.println("üì° IP: " + WiFi.softAPIP().toString());
    Serial.println("üì° =================================");
    Serial.println("üì° Acesse: http://" + WiFi.softAPIP().toString());
    Serial.println("üì° Tempo limite: 5 minutos");
    Serial.println("üì° =================================\n"); });

  Serial.println("üîÑ Tentando conectar ao WiFi...");

  if (!wifiManager.autoConnect(WIFI_AP_NAME, WIFI_AP_PASSWORD))
  {
    Serial.println("‚ùå Falha na conex√£o WiFi");
    Serial.println("üö® ATIVANDO MODO OFFLINE IMEDIATAMENTE");

    offlineMode = true;
    isOnlineMode = false;
    reconnectAttempts = MAX_RECONNECT_ATTEMPTS;

    Serial.println("üå± Sistema funcionar√° autonomamente");
  }
  else
  {
    Serial.println("‚úÖ Conectado ao WiFi!");
    Serial.println("üì∂ Rede: " + WiFi.SSID());

    offlineMode = false;
    isOnlineMode = true;
    reconnectAttempts = 0;
  }
}

void handleWiFiConnection()
{
  if (WiFi.status() != WL_CONNECTED)
  {
    if (!isReconnecting && millis() - lastConnectionAttempt > CONNECTION_TIMEOUT)
    {
      isReconnecting = true;
      lastConnectionAttempt = millis();
      Serial.println("üì∂ WiFi desconectado - tentando reconectar...");
      WiFi.reconnect();
    }

    if (reconnectAttempts >= MAX_RECONNECT_ATTEMPTS)
    {
      reconnectAttempts = 0;
      
      Serial.println("üö® M√°ximo de tentativas atingido - entrando em modo AP para reconfigura√ß√£o");

      wifiManager.setConfigPortalTimeout(WIFI_CONFIG_TIMEOUT);

      bool configResult = wifiManager.startConfigPortal(WIFI_AP_NAME, WIFI_AP_PASSWORD);

      if (configResult)
      {
        Serial.println("‚úÖ Configura√ß√£o WiFi conclu√≠da com sucesso!");
      }
      else
      {
        Serial.println("‚è∞ Timeout do modo AP expirado - tentando reconectar...");
      }

      // Ap√≥s sair do modo AP, tenta conectar normalmente
      if (WiFi.status() != WL_CONNECTED)
      {
        Serial.println("üîÑ Tentando conectar ao WiFi ap√≥s modo AP...");
        if (!wifiManager.autoConnect(WIFI_AP_NAME, WIFI_AP_PASSWORD))
        {
          Serial.println("‚ùå Falha na conex√£o WiFi ap√≥s modo AP");
          // Entrar em modo offline s√≥ ap√≥s esse segundo fracasso
          offlineMode = true;
          isOnlineMode = false;
          reconnectAttempts = 0;
          Serial.println("üå± Entrando em modo OFFLINE");
        }
        else
        {
          Serial.println("‚úÖ Conectado ao WiFi ap√≥s modo AP");
          offlineMode = false;
          isOnlineMode = true;
          reconnectAttempts = 0;
        }
      }

      isReconnecting = false; // Reset flag
    }
  }
  else // WiFi conectado
  {
    if (isReconnecting)
    {
      Serial.println("‚úÖ Reconex√£o WiFi bem-sucedida");
      isReconnecting = false;
    }

    if (offlineMode)
    {
      offlineMode = false;
      reconnectAttempts = 0;
      isOnlineMode = true;
      Serial.println("üîÑ WiFi reconectado - Saiu do modo OFFLINE");
    }
  }
}

void checkOfflineMode()
{
  reconnectAttempts++;
  Serial.println("üîÑ Tentativa de reconex√£o: " + String(reconnectAttempts) + "/" + String(MAX_RECONNECT_ATTEMPTS));

  if (reconnectAttempts >= MAX_RECONNECT_ATTEMPTS)
  {
    Serial.println("üö® M√°ximo de tentativas atingido - ATIVANDO MODO OFFLINE");
    offlineMode = true;
    isOnlineMode = false;
    reconnectAttempts = 0;

    Serial.println("üå± Sistema funcionar√° em modo aut√¥nomo");
    Serial.println("   - Irriga√ß√£o baseada em sensor de umidade");
    Serial.println("   - Limite: " + String(DEFAULT_MOISTURE_THRESHOLD) + "%");
    Serial.println("   - Dura√ß√£o: " + String(DEFAULT_IRRIGATION_DURATION / 1000) + " segundos");
  }
}

bool getOfflineMode()
{
  return offlineMode;
}

bool getOnlineMode()
{
  return isOnlineMode;
}

void resetWiFiSettings()
{
  wifiManager.resetSettings();
}

// Vari√°veis globais
unsigned long lastConnectionAttempt = 0;
int reconnectAttempts = 0;
bool offlineMode = false;
bool isOnlineMode = false;

#endif